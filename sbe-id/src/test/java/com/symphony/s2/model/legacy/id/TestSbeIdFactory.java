/*
 *
 *
 * Copyright 2018 Symphony Communication Services, LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.symphony.s2.model.legacy.id;

import static org.junit.Assert.assertEquals;

import org.apache.commons.codec.binary.Base64;
import org.junit.Test;

import com.symphony.oss.models.chat.canon.facade.MessageId;
import com.symphony.oss.models.core.canon.facade.PodAndUserId;
import com.symphony.oss.models.core.canon.facade.PodId;
import com.symphony.oss.models.sbe.id.SbeIdFactory;

@SuppressWarnings("javadoc")
public class TestSbeIdFactory
{
  private static final MessageId  MESSAGE_ID  = MessageId.newBuilder().build(Base64.decodeBase64("xjbP0HZYa8xSyPqH19BFxX///p49T8mWbQ=="));
  private static final Object     EXPECTED    = "uHKQC7zD7XX1A2zmBEk5YTHleLZmVd8TsCUW1DVqEkkBAQ==";

  private static final int INTERNAL_POD_ID = 1;
  private static final int EXTERNAL_POD_ID = 2;
  

  private static final PodId POD_ID = PodId.newBuilder().build(EXTERNAL_POD_ID);
  
  private final SbeIdFactory factory_ = new SbeIdFactory(INTERNAL_POD_ID, EXTERNAL_POD_ID);
  
  
  @Test
  public void TestRoundTrip()
  {
    assertEquals(EXPECTED, factory_.messageId(POD_ID, MESSAGE_ID).getAbsoluteHash().toString());
  }

  @Test
  public void testUserId()
  {
    // Values generated by UserIDUtilTest in SBE
    long internalUserIdValue = 68719476758L;
    long externalUserIdValue = 137438953494L;
    long baseUserId = 22;
    
    long internalPodIdPart = (long)INTERNAL_POD_ID << 36;
    long externalPodIdPart = (long)EXTERNAL_POD_ID << 36;
    
    // check we can OR together the pod and baseUserPart and get the right answer
    assertEquals(internalUserIdValue, baseUserId | internalPodIdPart);
    assertEquals(externalUserIdValue, baseUserId | externalPodIdPart);
    
    PodAndUserId internalUserId = PodAndUserId.newBuilder().build(internalUserIdValue);
    PodAndUserId externalUserId = PodAndUserId.newBuilder().build(externalUserIdValue);
    
    assertEquals(factory_.toExternalUserId(internalUserId), externalUserId);
    assertEquals(factory_.toExternalUserId(externalUserId), externalUserId);
    
    
    // check that the largest possible user ID extracts ok
    long largestPossibleUserPart = 0xFFFFFFFFFL;
    long largestPossibleInternalUserValue = largestPossibleUserPart | internalPodIdPart;
    long largestPossibleExternalUserValue = largestPossibleUserPart | externalPodIdPart;

    PodAndUserId largestPossibleInternalUser = PodAndUserId.newBuilder().build(largestPossibleInternalUserValue);
    PodAndUserId largestPossibleExternalUser = PodAndUserId.newBuilder().build(largestPossibleExternalUserValue);
    
    assertEquals(largestPossibleExternalUser, factory_.toExternalUserId(largestPossibleInternalUser));
    assertEquals(largestPossibleExternalUser, factory_.toExternalUserId(largestPossibleExternalUser));
  }
}
